kind: Deployment
apiVersion: apps/v1
metadata:
  name: "{{ .Values.serviceName }}-{{ required "Image Tag must be set!" .Values.image.tag }}"
  namespace: "{{ required "Namespace must be set!" .Values.namespace }}"
spec:
  replicas: {{ .Values.replicaCount }}
  {{- if .Values.timeouts.progressDeadlineSeconds }}
  progressDeadlineSeconds: {{ .Values.timeouts.progressDeadlineSeconds }}
  {{- end }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ .Values.serviceName | quote }}
      app.kubernetes.io/version: {{ .Values.image.tag | quote }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ .Values.serviceName | quote }}
        app.kubernetes.io/version: {{ .Values.image.tag | quote }}
    spec:
      {{- if .Values.podRoleArn }}
      serviceAccountName: {{ .Values.serviceName }}
      {{- end }}
      imagePullSecrets:
        - name: docker.pkg.github.com
        - name: ghcr.io
      {{- if .Values.timeouts.terminationTimeBeforeKillSeconds }}
      terminationGracePeriodSeconds: {{ .Values.timeouts.terminationTimeBeforeKillSeconds }}
      {{- end }}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 50
              podAffinityTerm:
                topologyKey: kubernetes.io/hostname
                labelSelector:
                  matchExpressions:
                  - key: app.kubernetes.io/name
                    operator: In
                    values:
                    - {{ .Values.serviceName | quote }}
                  - key: app.kubernetes.io/version
                    operator: In
                    values:
                    - {{ .Values.image.tag | quote }}
            - weight: 50
              podAffinityTerm:
                topologyKey: topology.kubernetes.io/zone
                labelSelector:
                  matchExpressions:
                  - key: app.kubernetes.io/name
                    operator: In
                    values:
                    - {{ .Values.serviceName | quote }}
                  - key: app.kubernetes.io/version
                    operator: In
                    values:
                    - {{ .Values.image.tag | quote }}
      containers:
        - name: {{ .Values.serviceName }}
          image: "{{ required "repository must be set!" .Values.image.repository }}:{{ required "tag must be set!" .Values.image.tag }}"
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
              protocol: TCP
              name: service
            - containerPort: 8081
              protocol: TCP
              name: management
            {{- range $port := .Values.internalPorts }}
            - name: {{ $port.name }}
              protocol: {{ $port.protocol }}
              containerPort: {{ $port.targetPort }}
            {{- end }}
          resources:
            requests:
              cpu: {{ required "CPU guarantee must be set!" .Values.resources.cpu.guarantee }}
              memory: {{ required "Memory requirement must be set!" .Values.resources.memory }}
            limits:
              cpu: {{ required "CPU limit must be set!" .Values.resources.cpu.limit }}
              memory: {{ required "Memory requirement must be set!" .Values.resources.memory }}

          startupProbe:
            exec:
              command: ["check", "run", "-type", "liveness"]
            periodSeconds: {{ .Values.startupProbe.periodSeconds }}
            failureThreshold: {{ .Values.startupProbe.failAfterCount }}
          livenessProbe:
            exec:
              command: ["check", "run", "-type", "liveness"]
            failureThreshold: {{ .Values.livenessProbe.failAfterCount }}
          readinessProbe:
            exec:
              command: ["check", "run", "-type", "readiness"]
            failureThreshold: {{ .Values.readinessProbe.failAfterCount }}
          lifecycle:
            preStop:
              exec:
                command: ["sleep", "{{ .Values.timeouts.terminationTimeBeforeSigTermSeconds }}"]
          env:
            - name: "SPRING_PROFILES_ACTIVE"
              value: "prod"

            - name: "CLUSTER_NAME" # Deprecated, should be removed in a later helm chart
              valueFrom:
                configMapKeyRef:
                  name: region
                  key: cluster-name
            - name: "ENV_NAME"
              valueFrom:
                configMapKeyRef:
                  name: region
                  key: env-name

            # Tracing environment configuration
            - name: "SPRING_SLEUTH_ENABLED"
              valueFrom:
                configMapKeyRef:
                  name: tracing
                  key: enabled
            - name: "SPRING_ZIPKIN_BASEURL"
              valueFrom:
                configMapKeyRef:
                  name: tracing
                  key: zipkin-base-url

            # Sentry
            - name: 'SENTRY_DSN'
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.serviceName }}-external-secret
                  key: "SENTRY_DSN"

            # More environment variables that can be enabled by configuration
            {{- if .Values.env.springDatasourceFromSecret }}
            - name: "SPRING_DATASOURCE_URL"
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.serviceName }}-external-secret
                  key: "SPRING_DATASOURCE_URL"
            - name: "SPRING_DATASOURCE_USERNAME"
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.serviceName }}-external-secret
                  key: "SPRING_DATASOURCE_USERNAME"
            - name: "SPRING_DATASOURCE_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.serviceName }}-external-secret
                  key: "SPRING_DATASOURCE_PASSWORD"
            {{- else if .Values.env.springDatasourceFromSecretWithRLS }}
            - name: "SPRING_DATASOURCE_URL"
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.serviceName }}-external-secret
                  key: "SPRING_DATASOURCE_URL"
            - name: "SPRING_DATASOURCE_USERNAME"
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.serviceName }}-external-secret
                  key: "SPRING_DATASOURCE_USERNAME"
            - name: "SPRING_DATASOURCE_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.serviceName }}-external-secret
                  key: "SPRING_DATASOURCE_PASSWORD"
            - name: "SPRING_FLYWAY_URL"
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.serviceName }}-external-secret
                  key: "SPRING_DATASOURCE_URL"
            - name: "SPRING_FLYWAY_USER"
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.serviceName }}-external-secret
                  key: "SPRING_FLYWAY_USER"
            - name: "SPRING_FLYWAY_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.serviceName }}-external-secret
                  key: "SPRING_FLYWAY_PASSWORD"
            {{- end }}
            {{- if .Values.env.springRabbitMQSecret }}
            - name: "SPRING_RABBITMQ_HOST"
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.serviceName }}-external-secret
                  key: "SPRING_RABBITMQ_HOST"
            - name: "SPRING_RABBITMQ_SSL_ENABLED"
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.serviceName }}-external-secret
                  key: "SPRING_RABBITMQ_SSL_ENABLED"
            - name: "SPRING_RABBITMQ_USERNAME"
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.serviceName }}-external-secret
                  key: "SPRING_RABBITMQ_USERNAME"
            - name: "SPRING_RABBITMQ_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.serviceName }}-external-secret
                  key: "SPRING_RABBITMQ_PASSWORD"
            {{- end }}
            - name: "SERVICE_OAUTH2_PUBLIC_KEY"
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.serviceName }}-external-secret"
                  key: SERVICE_OAUTH2_PUBLIC_KEY
            {{- if .Values.env.copyOwnExternalBaseURLIn }}
            - name: "{{ .Values.env.copyOwnExternalBaseURLIn }}"
              value: "https://{{ .Values.ingress.host }}"
            {{- end }}
            {{- range $key, $value := .Values.env.fromSecret }}
            - name: "{{ $key }}"
              valueFrom:
                secretKeyRef:
                  name: "{{ $.Values.serviceName }}-external-secret"
                  key: "{{ $key }}"
            {{- end }}
            {{- range $key, $value := .Values.env.additional }}
            - name: {{ $key }}
{{ toYaml $value | indent 14 }}
            {{- end }}
