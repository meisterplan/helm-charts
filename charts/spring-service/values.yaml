# how to call deployment, service and ingress
serviceName: ""

# namespace to use, typically team-<yourteamname>
namespace: ""

clusterName: "" # required, to be filled in by helm template argument [like image.tag] (example: staging)
secretsRoleArn: "" # required, to be filled in by <env>.values.yaml (example: arn:aws:iam::1234567890:role/read-secrets-role-staging-team-superpower)

# what Docker image to run
image:
  repository: "" # example: docker.pkg.github.com/itdesign-gmbh/mp-templatetiger/mp-templatetiger
  tag: "" # Tag is normally configured during deployment

# how many replicas to launch
replicaCount: 2

startupProbe:
  periodSeconds: 5  # interval how often startup should be checked
  failAfterCount: 10  # amount of retries until startup must have completed and liveness & readiness probe get armed
livenessProbe:
  failAfterCount: 3  # amount of retries before container is considered dead and killed
readinessProbe:
  failAfterCount: 3 # amount of retries before container is considered unready and stops receiving traffic (until next probe works)

# k8s resource definitions for required minimum and maximum growth
resources:
  memory: 600Mi
  cpu:
    guarantee: 100m
    limit: 1000m

ingress:
  host: "" # Hostname under which the service is available, normally configured per deployment target

# Optional: Manual configuration of special timeouts for deployments.
timeouts:
  terminationTimeBeforeSigTermSeconds: 15 # how many seconds to wait in "PreStop hook", i.e. after terminating pod but before SIGTERM to the container (e.g. for completing pending requests). If changed, the option below can also become relevant.
#  terminationTimeBeforeKillSeconds: ? # see https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#hook-handler-execution
#  progressDeadlineSeconds: ? # see https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#progress-deadline-seconds

# Optional: Additional ports that can be reached by other services inside the cluster, but not by requests from the load balancer
internalPorts: {}
  # - name: ftp
  #   port: 21 # exposed port inside the cluster for others
  #   targetPort: 1221 #  port to connect to at the running service
  #   protocol: TCP # which protocol to use

env:
  # name of env variable that should also receive the external base url
  # copyOwnExternalBaseURLIn: "SERVICE_BASE_URL_EXTERNAL"

  # Use this to provision a JDBC data source from a secret containing "jdbc-url", "username" & "password".
  # Pick "WithRLS" if you have an RLS user or the normal one if you only have one user. Setting both at the same time is not supported.
  # or remove it if it isn't required
  springDatasourceFromSecret: "" # "rds/templatetiger"
  springDatasourceFromSecretWithRLS: "" # "rds/templatetiger"
  springRabbitMQSecret: false # set to true if you want RabbitMQ credentials that work out of the box with Spring

  fromSecret: {}
  #  SOME_SECRET:
  #    parameterName: other-system/secret

  # custom k8s env definition
  additional: {}
  #  SOME_VARIABLE:
  #    value: 'some-value'

# If set to "false" prometheus scraping is not enabled
prometheusScraping: true

alertingRules: []
# - name: HighLatency
#   expr: avg(service_latency[5m]) > 2
#   for: 5m # optional
#   description: serviceName reports 95 percentile for Project Fields ACL endpoint was slower than 200ms in the last 1 hour # use actual serviceName for alert routing here
#   playbook_url: http://xconfluence/x/aBcDeFg
